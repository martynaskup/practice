{"version":3,"sources":["components/Header.js","components/TodoList/TodoItem.js","components/TodoList/todosData.js","components/Loader.js","components/TodoList/TodoItemList.js","components/Form/GenderRadio.js","components/Form/Countries.js","components/Form/Form.js","components/Balls/Balls.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["StyledHeaderDiv","styled","div","Nav","nav","Ul","ul","Li","li","Header","changeContent","className","role","name","onClick","TodoItem","props","item","id","text","done","type","checked","onChange","handleChange","todosData","Loader","TodoItemList","useState","isLoading","setIsLoading","todos","setTodos","useEffect","handleTodoChange","updatedTodos","map","TodoItems","key","GenderRadio","gender","genType","index","value","CountrySelect","select","Countries","country","allCountries","setAllCountries","fetch","then","response","json","data","countries","alpha2Code","countryOptions","e","target","StyledForm","Title","h1","Label","label","Textarea","textarea","Button","button","Form","firstName","setFirstName","email","setEmail","setGender","setCountry","funny","setFunny","joke","setJoke","resetForm","preventDefault","onSubmit","console","log","placeholder","required","Balls","Main","content","StyledFooter","footer","P","p","PLine","A","a","Footer","href","App","setContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b027923.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledHeaderDiv = styled.div`\r\n  background-color: #282c34;\r\n  padding: 20px 20px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\nconst Nav = styled.nav`\r\n  font-size: calc(10px + 1vmin);\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\nconst Ul = styled.ul`\r\n  padding: 0;\r\n`;\r\nconst Li = styled.li`\r\n  margin: 5px;\r\n  padding: 5px;\r\n  border: 1px solid burlywood;\r\n  display: inline;\r\n  list-style: none;\r\n`;\r\n\r\nconst Header = ({ changeContent }) => {\r\n  return (\r\n    <StyledHeaderDiv className='App-header'>\r\n      <header role='banner'>Practice examples for React</header>\r\n      <Nav role='navigation'>\r\n        <Ul>\r\n          <Li name='form' onClick={name => changeContent('form')}>\r\n            Form\r\n          </Li>\r\n          <Li name='todo' onClick={name => changeContent('todo')}>\r\n            Todo List\r\n          </Li>\r\n          <Li name='balls' onClick={name => changeContent('balls')}>\r\n            Balls\r\n          </Li>\r\n        </Ul>\r\n      </Nav>\r\n    </StyledHeaderDiv>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction TodoItem(props) {\r\n  const { id, text, done } = props.item;\r\n\r\n  return (\r\n    <>\r\n      <label className={done ? 'Todo-done' : null}>\r\n        <input\r\n          type='checkbox'\r\n          id={id}\r\n          checked={done}\r\n          onChange={() => props.handleChange(id)}\r\n        />\r\n        {text}\r\n      </label>\r\n      <hr />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","const todosData = [\r\n  {\r\n    id: 1,\r\n    text: 'Take out the trash',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Grocery shopping',\r\n    done: false\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Clean gecko tank',\r\n    done: false\r\n  },\r\n  {\r\n    id: 4,\r\n    text: 'Mow lawn',\r\n    done: true\r\n  },\r\n  {\r\n    id: 5,\r\n    text: 'Catch up on Arrested Development',\r\n    done: false\r\n  }\r\n];\r\n\r\nexport default todosData;\r\n","import React from 'react';\r\n\r\nfunction Loader() {\r\n  return <h1>I am loading data for you!</h1>;\r\n}\r\n\r\nexport default Loader;\r\n","import React, { useState, useEffect } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport todosData from './todosData';\r\nimport Loader from '../Loader';\r\nimport './TodoItemList.css';\r\n\r\nconst TodoItemList = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    setTodos(todosData);\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const handleTodoChange = id => {\r\n    const updatedTodos = todos.map(item => {\r\n      if (item.id === id) {\r\n        item.done = !item.done;\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const TodoItems = todos.map(item => (\r\n    <TodoItem key={item.id} item={item} handleChange={handleTodoChange} />\r\n  ));\r\n\r\n  return (\r\n    <main role=\"main\" className=\"App-main todo\">\r\n      <h1>This is a simple TodoList</h1>\r\n      <div className=\"Todo-list\">{isLoading ? <Loader /> : TodoItems}</div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default TodoItemList;\r\n","import React from 'react';\r\n\r\nconst GenderRadio = ({ gender, handleChange }) => {\r\n  const genderTypes = ['male', 'female', 'other'];\r\n\r\n  const genderRadioInputs = genderTypes.map((genType, index) => (\r\n    <label key={index}>\r\n      <input\r\n        type='radio'\r\n        name={genType}\r\n        value={gender}\r\n        checked={gender === genType}\r\n        onChange={() => handleChange(genType)}\r\n      />\r\n      {genType}\r\n    </label>\r\n  ));\r\n\r\n  return genderRadioInputs;\r\n};\r\nexport default GenderRadio;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CountrySelect = styled.select`\r\n  width: 270px;\r\n`;\r\n\r\nconst Countries = ({ country, handleChange }) => {\r\n  const [allCountries, setAllCountries] = useState([]);\r\n\r\n  const countryList = () => {\r\n    fetch('https://restcountries.eu/rest/v2/all')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const countries = data.map(item => {\r\n          const singleCountry = { name: item.name, id: item.alpha2Code };\r\n          return singleCountry;\r\n        });\r\n        setAllCountries(countries);\r\n      });\r\n  };\r\n\r\n  useEffect(() => countryList(), []);\r\n\r\n  const countryOptions = allCountries.map(item => {\r\n    return (\r\n      <option key={item.id} value={item.name}>\r\n        {item.name}\r\n      </option>\r\n    );\r\n  });\r\n\r\n  const handleCountryChange = e => {\r\n    handleChange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      Country: &nbsp;\r\n      <CountrySelect\r\n        name='country'\r\n        value={country}\r\n        onChange={handleCountryChange}\r\n      >\r\n        <option value=''>-- Choose the country --</option>\r\n        {countryOptions}\r\n      </CountrySelect>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React, { useState } from 'react';\r\nimport GenderRadio from './GenderRadio';\r\nimport styled from 'styled-components';\r\nimport Countries from './Countries';\r\n\r\nconst StyledForm = styled.div`\r\n  width: 300px;\r\n  margin: 20px auto;\r\n  border: 3px double white;\r\n\r\n  @media only screen and (min-width: 410px) {\r\n    width: 400px;\r\n  `;\r\nconst Title = styled.h1`\r\n  margin: 20px 0;\r\n  font-size: 24px;\r\n  background-color: aqua;\r\n\r\n  @media only screen and (min-width: 410px) {\r\n    width: 400px;\r\n    font-size: 32px;\r\n  `;\r\nconst Label = styled.label`\r\n  display: block;\r\n  margin: 5px 0;\r\n  padding: 0;\r\n\r\n  &.joke {\r\n    font-style: italic;\r\n    width: 270px;\r\n    margin: 15px auto 5px;\r\n\r\n    @media only screen and (min-width: 410px) {\r\n      width: 320px;\r\n    }\r\n  }\r\n`;\r\nconst Textarea = styled.textarea`\r\n  display: block;\r\n  height: 60px;\r\n  width: inherit;\r\n  margin: auto;\r\n\r\n  @media only screen and (min-width: 410px) {\r\n    height: 100px;\r\n    width: inherit;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 20px 15px 0;\r\n  padding: 5px 10px;\r\n  background-color: aqua;\r\n  border-radius: 20%;\r\n  cursor: pointer;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Form = () => {\r\n  const [firstName, setFirstName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [gender, setGender] = useState('');\r\n  const [country, setCountry] = useState('');\r\n  const [funny, setFunny] = useState(false);\r\n  const [joke, setJoke] = useState('');\r\n\r\n  const resetForm = e => {\r\n    setFirstName('');\r\n    setEmail('');\r\n    setGender('');\r\n    setCountry('');\r\n    setFunny(false);\r\n    setJoke('');\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    console.log('submitted');\r\n    resetForm(e);\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <StyledForm className='form'>\r\n      <Title>This is a sample Form</Title>\r\n      <form onSubmit={handleSubmit}>\r\n        <Label>\r\n          First name: &nbsp;\r\n          <input\r\n            type='text'\r\n            name='firstName'\r\n            value={firstName}\r\n            onChange={e => setFirstName(e.target.value)}\r\n            placeholder='First name'\r\n            required\r\n          />\r\n        </Label>\r\n        <Label>\r\n          Email: &nbsp;\r\n          <input\r\n            type='text'\r\n            name='email'\r\n            value={email}\r\n            onChange={e => setEmail(e.target.value)}\r\n            placeholder='Email'\r\n          />\r\n        </Label>\r\n        <Label>\r\n          <GenderRadio gender={gender} handleChange={setGender} />\r\n        </Label>\r\n        <Countries country={country} handleChange={setCountry} />\r\n        <Label>\r\n          <input\r\n            type='checkbox'\r\n            name='funny'\r\n            checked={funny}\r\n            onChange={e => setFunny(e.target.checked)}\r\n          />\r\n          Are you funny?\r\n        </Label>\r\n        {!funny ? null : (\r\n          <Label className='joke'>\r\n            As you said, you're funny. So tell us a joke and let us laugh!\r\n            <Textarea\r\n              name='joke'\r\n              value={joke}\r\n              onChange={e => setJoke(e.target.value)}\r\n              placeholder='Your joke :) '\r\n            />\r\n          </Label>\r\n        )}\r\n        <Button>Submit</Button>\r\n        <Button onClick={resetForm}>Reset</Button>\r\n      </form>\r\n      <p>{joke}</p>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './Balls.css';\r\n\r\nconst Balls = () => {\r\n  console.log('hello');\r\n\r\n  return (\r\n    <div>\r\n      <div className='ball jump'></div>\r\n      <p>I jump!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Balls;\r\n","import React from 'react';\r\nimport TodoItemList from './TodoList/TodoItemList';\r\nimport Form from './Form/Form';\r\nimport Balls from './Balls/Balls';\r\n\r\nconst Main = ({ content }) => {\r\n  return (\r\n    <main role='main' className='App-main'>\r\n      {content === 'todo' ? (\r\n        <TodoItemList />\r\n      ) : content === 'form' ? (\r\n        <Form />\r\n      ) : (\r\n        <Balls />\r\n      )}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledFooter = styled.footer`\r\n  background-color: #282c34;\r\n  color: white;\r\n  padding: 10px;\r\n  margin-bottom: 0;\r\n  font-size: 12px;\r\n\r\n  @media only screen and (min-width: 410px) {\r\n    font-size: 16px;\r\n  }\r\n`;\r\nconst P = styled.p`\r\n  display: inline-block;\r\n  margin: 0 5px;\r\n\r\n  @media only screen and (min-width: 410px) {\r\n    padding: 10px;\r\n  }\r\n`;\r\nconst PLine = styled.p`\r\n  display: inline-block;\r\n  margin: 0;\r\n  padding: 10px 0;\r\n`;\r\nconst A = styled.a`\r\n  color: white;\r\n  padding: 2px;\r\n`;\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <StyledFooter role='contentinfo' className='App-StyledFooter'>\r\n      <P>\r\n        &copy; 2019 by Martyna Skup (\r\n        <A href='https://snikerslala.github.io/'>snikerslala</A>)\r\n      </P>\r\n      <PLine>|</PLine>\r\n      <P>\r\n        <A href='https://github.com/snikerslala'>GitHub</A>\r\n      </P>\r\n      <PLine>|</PLine>\r\n      <P>\r\n        <A href='https://www.linkedin.com/in/martynaskup/'>LinkedIn</A>\r\n      </P>\r\n    </StyledFooter>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\nimport './App.css';\n\nconst App = () => {\n  const [content, setContent] = useState('');\n\n  return (\n    <div className=\"App\">\n      <Header changeContent={setContent} />\n      <Main content={content} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}